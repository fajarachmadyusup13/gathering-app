// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fajarachmadyusup13/gathering-app/internal/model (interfaces: MemberRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/fajarachmadyusup13/gathering-app/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockMemberRepository is a mock of MemberRepository interface.
type MockMemberRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMemberRepositoryMockRecorder
}

// MockMemberRepositoryMockRecorder is the mock recorder for MockMemberRepository.
type MockMemberRepositoryMockRecorder struct {
	mock *MockMemberRepository
}

// NewMockMemberRepository creates a new mock instance.
func NewMockMemberRepository(ctrl *gomock.Controller) *MockMemberRepository {
	mock := &MockMemberRepository{ctrl: ctrl}
	mock.recorder = &MockMemberRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberRepository) EXPECT() *MockMemberRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMemberRepository) Create(arg0 context.Context, arg1 *model.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMemberRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMemberRepository)(nil).Create), arg0, arg1)
}

// DeleteByID mocks base method.
func (m *MockMemberRepository) DeleteByID(arg0 context.Context, arg1 int64) (*model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockMemberRepositoryMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockMemberRepository)(nil).DeleteByID), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockMemberRepository) FindAll(arg0 context.Context) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockMemberRepositoryMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockMemberRepository)(nil).FindAll), arg0)
}

// FindByID mocks base method.
func (m *MockMemberRepository) FindByID(arg0 context.Context, arg1 int64) (*model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockMemberRepositoryMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockMemberRepository)(nil).FindByID), arg0, arg1)
}

// UpdateByID mocks base method.
func (m *MockMemberRepository) UpdateByID(arg0 context.Context, arg1 *model.Member) (*model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockMemberRepositoryMockRecorder) UpdateByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockMemberRepository)(nil).UpdateByID), arg0, arg1)
}
