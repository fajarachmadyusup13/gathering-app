// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fajarachmadyusup13/gathering-app/internal/model (interfaces: AttendeeRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/fajarachmadyusup13/gathering-app/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAttendeeRepository is a mock of AttendeeRepository interface.
type MockAttendeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAttendeeRepositoryMockRecorder
}

// MockAttendeeRepositoryMockRecorder is the mock recorder for MockAttendeeRepository.
type MockAttendeeRepositoryMockRecorder struct {
	mock *MockAttendeeRepository
}

// NewMockAttendeeRepository creates a new mock instance.
func NewMockAttendeeRepository(ctrl *gomock.Controller) *MockAttendeeRepository {
	mock := &MockAttendeeRepository{ctrl: ctrl}
	mock.recorder = &MockAttendeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendeeRepository) EXPECT() *MockAttendeeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAttendeeRepository) Create(arg0 context.Context, arg1 *model.Attendee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAttendeeRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAttendeeRepository)(nil).Create), arg0, arg1)
}

// DeleteByMemberIDAndGatheringID mocks base method.
func (m *MockAttendeeRepository) DeleteByMemberIDAndGatheringID(arg0 context.Context, arg1, arg2 int64) (*model.Attendee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByMemberIDAndGatheringID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Attendee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByMemberIDAndGatheringID indicates an expected call of DeleteByMemberIDAndGatheringID.
func (mr *MockAttendeeRepositoryMockRecorder) DeleteByMemberIDAndGatheringID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByMemberIDAndGatheringID", reflect.TypeOf((*MockAttendeeRepository)(nil).DeleteByMemberIDAndGatheringID), arg0, arg1, arg2)
}

// FindByGatheringID mocks base method.
func (m *MockAttendeeRepository) FindByGatheringID(arg0 context.Context, arg1 int64) ([]*model.Attendee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGatheringID", arg0, arg1)
	ret0, _ := ret[0].([]*model.Attendee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGatheringID indicates an expected call of FindByGatheringID.
func (mr *MockAttendeeRepositoryMockRecorder) FindByGatheringID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGatheringID", reflect.TypeOf((*MockAttendeeRepository)(nil).FindByGatheringID), arg0, arg1)
}

// FindByMemberID mocks base method.
func (m *MockAttendeeRepository) FindByMemberID(arg0 context.Context, arg1 int64) ([]*model.Attendee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMemberID", arg0, arg1)
	ret0, _ := ret[0].([]*model.Attendee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMemberID indicates an expected call of FindByMemberID.
func (mr *MockAttendeeRepositoryMockRecorder) FindByMemberID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMemberID", reflect.TypeOf((*MockAttendeeRepository)(nil).FindByMemberID), arg0, arg1)
}
